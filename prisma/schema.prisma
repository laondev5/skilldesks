datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    admin Admin @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    admin        Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    status        String?
    brandName     String?
    industry      String?
    completed     String?
    url           String?
    description   String?
    jobs          Jobs[]
    accounts      Account[]
    sessions      Session[]
}

model Admin {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    status        String?
    brandName     String?
    industry      String?
    completed     String?
    url           String?
    description   String?
    accounts      Account[]
    sessions      Session[]
}

model Jobs {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    brandName   String
    title       String
    Description String
    industry    String
    jobType     String
    country     String
    pay         Int
    city        String
    coverImage  String
    userId      String @db.ObjectId
    user        User   @relation(fields: [userId], references: [id])
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
